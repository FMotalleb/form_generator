// Mocks generated by Mockito 5.1.0 from annotations
// in form_generator/test/features/add_form_page/data/repository/form_manager_repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:form_generator/core/contracts/interfaces/data_source/db_data_source_base.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDataSource<T> extends _i1.Mock implements _i2.IDataSource<T> {
  MockIDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> write(T? input) =>
      (super.noSuchMethod(Invocation.method(#write, [input]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> update(T? input) =>
      (super.noSuchMethod(Invocation.method(#update, [input]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteItem(T? input) =>
      (super.noSuchMethod(Invocation.method(#deleteItem, [input]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAllItems() =>
      (super.noSuchMethod(Invocation.method(#deleteAllItems, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<T>> getAllItems() =>
      (super.noSuchMethod(Invocation.method(#getAllItems, []),
          returnValue: Future<List<T>>.value(<T>[])) as _i3.Future<List<T>>);
  @override
  _i3.Future<T?> getItemById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getItemById, [id]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
}
