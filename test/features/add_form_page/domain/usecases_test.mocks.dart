// Mocks generated by Mockito 5.1.0 from annotations
// in form_generator/test/features/add_form_page/domain/usecases_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:form_generator/core/models_and_entities/entities/form_entities/form_entity.dart'
    as _i4;
import 'package:form_generator/features/add_form_page/data/repositories/form_manager_repo.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FormManagerRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormManagerRepo extends _i1.Mock implements _i2.FormManagerRepo {
  MockFormManagerRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addForm(_i4.FormEntity? form) =>
      (super.noSuchMethod(Invocation.method(#addForm, [form]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteForm(_i4.FormEntity? form) =>
      (super.noSuchMethod(Invocation.method(#deleteForm, [form]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.FormEntity>?> getAllForms() =>
      (super.noSuchMethod(Invocation.method(#getAllForms, []),
              returnValue: Future<List<_i4.FormEntity>?>.value())
          as _i3.Future<List<_i4.FormEntity>?>);
  @override
  _i3.Future<_i4.FormEntity?> getFormById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getFormById, [id]),
              returnValue: Future<_i4.FormEntity?>.value())
          as _i3.Future<_i4.FormEntity?>);
  @override
  _i3.Future<void> updateForm(_i4.FormEntity? form) =>
      (super.noSuchMethod(Invocation.method(#updateForm, [form]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteAllForms() =>
      (super.noSuchMethod(Invocation.method(#deleteAllForms, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
